*dotfiles.txt*	vim cheatsheet

==============================================================================
table of contents					|my-content|

basics							|my-basics|
help							|my-help|
search							|my-search|
coc.nvim						|my-coc.nvim|
clojure							|my-clojure|

==============================================================================
basics							*my-basics*

  <Leader>ev 		Open vim config for editing
  <Leader>k 		Toggle NERDtree
  <Leader>n 		Display current file in NERDtree

==============================================================================
help							*my-help*

  q			Close the current help window
  <Leader>hs 		Generate helptags for this cheatsheet.
  <Leader>hh 		Open this cheatsheet in the help window

==============================================================================
search							*my-search*

  \			Search all files (Ag)
  <Leader>f 		Search files in cwd
  <Leader>r 		Search buffer files
  <Leader>s 		Search lines in current buffer
  <Leader>l 		Search lines in all buffers
  <Leader>g 		Search git files

==============================================================================
coc.nvim						*my-coc.nvim*

`coc.nvim` is used primarily for JavaScript/TypeScript. Any mapping that
uses `<LocalLeader>` is specific to JavaScript/TypeScript; otherwise the
mapping can be used across file types unless otherwise indicated.

  <LocalLeader>c 	Restart coc.nvim (TypeScript)
  <LocalLeader>tt 	Run test under cursor (jest)
  <LocalLeader>tf 	Run all tests in file (jest)
  <LocalLeader>ta 	Run all tests in project (jest)

==============================================================================
clojure							*my-clojure*

Clojure integration relies heavily on `vim-iced`, so `iced repl` must be
running for the current project for the following mappings to function.

  <LocalLeader>c 	Connect to nRepl

  <LocalLeader>ei	Evaluate the current (inner) form under cursor
  <LocalLeader>ee	Evaluate the outer list
  <LocalLeader>et	Evaluate the outer top list
  <LocalLeader>en	Evaluate the current namespace
  <LocalLeader>eq 	Interrupt the current eval; useful for evals that
			are taking too long.
  <LocalLeader>eb	Load the current buffer
  <LocalLeader>eB	Require and reload the current file and all deps
  <LocalLeader>ep	Open a window and show the last evaluated value
  <LocalLeader>eu	Undefine the symbol under cursor in current namespace
  <LocalLeader>eM	Evaluate `macroexpand` of outer list
  <LocalLeader>em	Evaluate `macroexpand-1` of outer list

  <LocalLeader>rcn	Clean the current namespace
  <LocalLeader>rca	Clean and format the current namespace
  <LocalLeader>ram	Add missing libspec for symbol under cursor
  <LocalLeader>ran	Add `require` for specified `ns` to current `(ns)`
  <LocalLeader>rtf	Refactor current outer form to use `->` macro
  <LocalLeader>rtl	Refactor current outer form to use `->>` macro
  <LocalLeader>ref	Extract the form under the cursor as a function
  <LocalLeader>raa	Add an arity to `defn`, `fn`, `defmacro`, or `defmethod`
  <LocalLeader>rml	Move the form under cursor to nearest let binding.
			If there is no let form in current top list,
			wrap the form with let.

  <LocalLeader>tt	Run the test under the cursor
  <LocalLeader>tl	Re-run the last test
  <LocalLeader>to	Open the test result buffer
  <LocalLeader>tn	Run tests in the current namespace
  <LocalLeader>ta	Run all tests in the current project
  <LocalLeader>tr	Re-run failed tests

  K			Show documentation for the symbol under cursor
  <LocalLeader>hq	Close the documentation window
  <LocalLeader>hs	Show source for symbol under cursor
  <LocalLeader>hc	Open ClojureDocs for symbol under cursor
  <LocalLeader>hh	Select command from palette

  <C-]>			Jump to definition for symbol under cursor
  <C-t>			Jump back to cursor
  <LocalLeader>jl	Move cursor to nearest `let` form in current top list

  ==			Format form under cursor
  =G			Alias for clean/format all (`<LocalLeader>rca`)

==============================================================================
vim:tw=78:cc=78:ts=8:ft=help:norl:noexpandtab
